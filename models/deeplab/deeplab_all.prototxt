# VGG 16-layer network convolutional finetuning
# Network modified to have smaller receptive field (128 pixels)
# and smaller stride (8 pixels) when run in convolutional mode.
#
# For alignment to work, we set:
# (1) input dimension equal to
# $n = 8 * k + 2$, e.g., 306 (for k = 38)
# (2) dimension after 3rd max-pooling (centered at -3.5)
# $m = k + 2$ (40 if k = 38)
# (3) dimension after 4th max-pooling (centered at -1.5)
# $m = k + 1$ (39 if k = 38)
# (4) Crop 1 pixels at the begin of label map and shrink by 8
# to produce the expected $m$
# 

name: "deeplab_all"
# RGB input
layers {
  name: "data"
  type: IMAGE_SEG_DATA
  top: "data"
  top: "label"
  image_data_param {
    root_folder: "/home/ganyk/"
    source: "/home/ganyk/SUNRGBD/list_train.txt"
    label_type: PIXEL
    batch_size: 1
    shuffle: true
  }
  transform_param {
    mean_value: 110.324
    mean_value: 116.435
    mean_value: 125.793
    crop_size: 426 # = 53*8 + 2
    mirror: true
  }
  include: { phase: TRAIN }
}
layers {
  name: "data"
  type: IMAGE_SEG_DATA
  top: "data"
  top: "label"
  image_data_param {
    root_folder: "/home/ganyk/"
    source: "/home/ganyk/SUNRGBD/list_test.txt"
    label_type: PIXEL
    batch_size: 10
    shuffle: true
  }
  transform_param {
    mean_value: 110.324
    mean_value: 116.435
    mean_value: 125.793
    crop_size: 426 # = 53*8 + 2
    mirror: true
  }
  
  include: { phase: TEST }
}

### RGB VGG NETWORK ###

layers {
  bottom: "data"
  top: "conv1_1"
  name: "conv1_1"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "conv1_1"
  top: "conv1_1"
  name: "relu1_1"
  type: RELU
}
layers {
  bottom: "conv1_1"
  top: "conv1_2"
  name: "conv1_2"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "conv1_2"
  top: "conv1_2"
  name: "relu1_2"
  type: RELU
}
layers {
  bottom: "conv1_2"
  top: "pool1"
  name: "pool1"
  type: POOLING
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 1
  }
}
layers {
  bottom: "pool1"
  top: "conv2_1"
  name: "conv2_1"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "conv2_1"
  top: "conv2_1"
  name: "relu2_1"
  type: RELU
}
layers {
  bottom: "conv2_1"
  top: "conv2_2"
  name: "conv2_2"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "conv2_2"
  top: "conv2_2"
  name: "relu2_2"
  type: RELU
}
layers {
  bottom: "conv2_2"
  top: "pool2"
  name: "pool2"
  type: POOLING
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 1
  }
}
layers {
  bottom: "pool2"
  top: "conv3_1"
  name: "conv3_1"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "conv3_1"
  top: "conv3_1"
  name: "relu3_1"
  type: RELU
}
layers {
  bottom: "conv3_1"
  top: "conv3_2"
  name: "conv3_2"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "conv3_2"
  top: "conv3_2"
  name: "relu3_2"
  type: RELU
}
layers {
  bottom: "conv3_2"
  top: "conv3_3"
  name: "conv3_3"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "conv3_3"
  top: "conv3_3"
  name: "relu3_3"
  type: RELU
}
layers {
  bottom: "conv3_3"
  top: "pool3"
  name: "pool3"
  type: POOLING
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 1
  }
}
layers {
  bottom: "pool3"
  top: "conv4_1"
  name: "conv4_1"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "conv4_1"
  top: "conv4_1"
  name: "relu4_1"
  type: RELU
}
layers {
  bottom: "conv4_1"
  top: "conv4_2"
  name: "conv4_2"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "conv4_2"
  top: "conv4_2"
  name: "relu4_2"
  type: RELU
}
layers {
  bottom: "conv4_2"
  top: "conv4_3"
  name: "conv4_3"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "conv4_3"
  top: "conv4_3"
  name: "relu4_3"
  type: RELU
}
layers {
  bottom: "conv4_3"
  top: "pool4"
  name: "pool4"
  type: POOLING
  pooling_param {
    pool: MAX
    kernel_size: 2
    #pad: 1
    #stride: 2
    stride: 1
  }
}
layers {
  bottom: "pool4"
  top: "conv5_1"
  name: "conv5_1"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 512
    #pad: 1
    pad: 2
    hole: 2
    kernel_size: 3
  }
}
layers {
  bottom: "conv5_1"
  top: "conv5_1"
  name: "relu5_1"
  type: RELU
}
layers {
  bottom: "conv5_1"
  top: "conv5_2"
  name: "conv5_2"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 512
    #pad: 1
    pad: 2
    hole: 2
    kernel_size: 3
  }
}
layers {
  bottom: "conv5_2"
  top: "conv5_2"
  name: "relu5_2"
  type: RELU
}
layers {
  bottom: "conv5_2"
  top: "conv5_3"
  name: "conv5_3"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 512
    #pad: 1
    pad: 2
    hole: 2
    kernel_size: 3
  }
}
layers {
  bottom: "conv5_3"
  top: "conv5_3"
  name: "relu5_3"
  type: RELU
}
layers {
  bottom: "conv5_3"
  top: "pool5"
  name: "pool5"
  type: POOLING
  pooling_param {
    pool: MAX
    #kernel_size: 2
    #stride: 2
    kernel_size: 3
    stride: 1
    pad: 1
  }
}

layers {
  bottom: "pool5"
  top: "conv6"
  name: "conv6"
  type: CONVOLUTION
  strict_dim: false
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 4096
    pad: 6
    hole: 4
    kernel_size: 4
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  bottom: "conv6"
  top: "conv6"
  name: "relu6"
  type: RELU
}
layers {
  bottom: "conv6"
  top: "conv6"
  name: "drop6"
  type: DROPOUT
  dropout_param {
    dropout_ratio: 0.5
  }
}
layers {
  bottom: "conv6"
  top: "conv7"
  name: "conv7"
  type: CONVOLUTION
  strict_dim: false
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 4096
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  bottom: "conv7"
  top: "conv7"
  name: "relu7"
  type: RELU
}
layers {
  bottom: "conv7"
  top: "conv7"
  name: "drop7"
  type: DROPOUT
  dropout_param {
    dropout_ratio: 0.5
  }
}
layers {
  bottom: "conv7"
  top: "conv8"
  name: "conv8"
  type: CONVOLUTION
  strict_dim: false
  blobs_lr: 10
  blobs_lr: 20
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 38
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


layer {
  name: "clip_markersrgb"
  type: "DummyData"
  top: "clip_markers_rgb"
  dummy_data_param {
    shape {
      dim: 2916
      dim: 1 
      dim: 1
      dim: 1
    }
  }  
}
layer{
  name: "transposergb"
  type: "Transpose"
  bottom: "conv8"
  top: "conv8-transpose"
  reshape_param{
    shape{
      dim: 54
      dim: 54
      dim: 38
    }
  }
}
layer{
  name: "reshape-cmrgb"
  type: "Reshape"
  bottom: "clip_markers_rgb"
  top: "reshape-cmrgb"
  reshape_param{
    shape{
      dim: 54
      dim: 54
    }
  }
}

# from top to bottom using lstm each column as lstm input is T*N*features
layer {
  name: "lstmrgb1"
  type: "LSTM"
  bottom: "conv8-transpose"
  bottom: "reshape-cmrgb"
  top: "lstmrgb1"
  recurrent_param {
    num_output: 100
    weight_filler {
      type: "uniform"
      min: -0.01
      max: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


lyaer{
  name: "lstmrgb1last"
  type: "LastRow"
  bottom: "lstmrgb1"
  top: "lstmrgb_1"
}


# from left to right using another lstm at last row to obtain the global context/encode
layer {
  name: "clip_markersrgb_1"
  type: "DummyData"
  top: "clip_markers_rgb_1"
  dummy_data_param {
    shape {
      dim: 54
      dim: 1 
      dim: 1
      dim: 1
    }
  }  
}

layer{
  name: "reshape-cmrgb2"
  type: "Reshape"
  bottom: "clip_markers_rgb_1"
  top: "reshape-cmrgb_2"
  reshape_param{
    shape{
      dim: 55
      dim: 1
    }
  }
}

layer {
  name: "lstmrgb2"
  type: "LSTM"
  bottom: "lstmrgb_1"
  bottom: "reshape-cmrgb_2"
  top: "lstmrgb2"
  recurrent_param {
    num_output: 100
    weight_filler {
      type: "uniform"
      min: -0.01
      max: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

## HHA input 
layers {
  name: "datahha"
  type: IMAGE_SEG_DATA
  top: "data"
  top: "label"
  image_data_param {
    root_folder: "/home/ganyk/"
    source: "/home/ganyk/SUNRGBD/HHAList_train.txt"
    label_type: NONE
    batch_size: 1
    shuffle: true
  }
  transform_param {
    mean_value: 110.324
    mean_value: 116.435
    mean_value: 125.793
    crop_size: 424 # = 53*8 
    mirror: true
  }
  include: { phase: TRAIN }
}
layers {
  name: "datahha"
  type: IMAGE_SEG_DATA
  top: "data"
  top: "label"
  image_data_param {
    root_folder: "/home/ganyk/"
    source: "/home/ganyk/SUNRGBD/HHAList_test.txt"
    label_type: NONE
    batch_size: 10
    shuffle: true
  }
  transform_param {
    mean_value: 110.324
    mean_value: 116.435
    mean_value: 125.793
    crop_size: 424 # = 53*8 
    mirror: true
  }
  
  include: { phase: TEST }
}

### HHA 3 Conv NETWORK ###
layers {
  bottom: "datahha"
  top: "convhha_1"
  name: "convhha1"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "convhha_1"
  top: "reluhha_1"
  name: "reluhha1"
  type: RELU
}

layers {
  bottom: "reluhha_1"
  top: "poolhha_1"
  name: "poolhha1"
  type: POOLING
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 0
  }
}
layers {
  bottom: "poolhha_1"
  top: "convhha_2"
  name: "convhha2"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "convhha_2"
  top: "reluhha_2"
  name: "reluhha2"
  type: RELU
}

layers {
  bottom: "reluhha_2"
  top: "poolhha_2"
  name: "poolhha2"
  type: POOLING
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 0
  }
}

layers {
  bottom: "poolhha_2"
  top: "convhha_3"
  name: "convhha3"
  type: CONVOLUTION
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layers {
  bottom: "convhha_3"
  top: "reluhha_3"
  name: "reluhha3"
  type: RELU
}

layers {
  bottom: "reluhha_3"
  top: "poolhha_3"
  name: "poolhha3"
  type: POOLING
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 0
  }
}

layer {
  name: "clip_markershha"
  type: "DummyData"
  top: "clip_markers_hha"
  dummy_data_param {
    shape {
      dim: 2809
      dim: 1 
      dim: 1
      dim: 1
    }
  }  
}
layer{
  name: "reshape-datahha"
  type: "Reshape"
  bottom: "poolhha_3"
  top: "poolhha3-reshape"
  reshape_param{
    shape{
      dim: 53
      dim: 53
      dim: 128
    }
  }
}
layer{
  name: "reshape-cmhha"
  type: "Reshape"
  bottom: "clip_markers_hha"
  top: "reshape-cmhha"
  reshape_param{
    shape{
      dim: 53
      dim: 53
    }
  }
}

# from top to bottom using lstm each column
layer {
  name: "lstmhha1"
  type: "LSTM"
  bottom: "poolhha3-reshape"
  bottom: "reshape-cmhha"
  top: "lstmhha1"
  recurrent_param {
    num_output: 100
    weight_filler {
      type: "uniform"
      min: -0.01
      max: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

lyaer{
  name: "lstmhha1last"
  type: "LastRow"
  bottom: "lstmhha1"
  top: "lstmhha_1"
}


# from left to right using another lstm at last row to obtain the global context/encode
layer {
  name: "clip_markershha_1"
  type: "DummyData"
  top: "clip_markers_hha_1"
  dummy_data_param {
    shape {
      dim: 53
      dim: 1 
      dim: 1
      dim: 1
    }
  }  
}

layer{
  name: "reshape-cmhha2"
  type: "Reshape"
  bottom: "clip_markers_hha_1"
  top: "reshape-cmhha_2"
  reshape_param{
    shape{
      dim: 53
      dim: 1
    }
  }
}

layer {
  name: "lstmhha2"
  type: "LSTM"
  bottom: "lstmhha_1"
  bottom: "reshape-cmhha_2"
  top: "lstmrgb2"
  recurrent_param {
    num_output: 100
    weight_filler {
      type: "uniform"
      min: -0.01
      max: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

# concatenate the global context of rgb and depth
layer {
  name: "rgbrepmat"
  type: "RepMat"
  bottom: "lstmrgb2"
  top: "rgbglobal"
  repmat_param{
    rep_n: 1
    rep_c: 1
    rep_w: 54
    rep_h: 54
  }
}

layer {
  name: "hharepmat"
  type: "RepMat"
  bottom: "lstmhha2"
  top: "hhaglobal"
  repmat_param{
    rep_n: 1
    rep_c: 1
    rep_w: 54
    rep_h: 54
  }
}

layer {
  name: "concat"
  bottom: "rgbglobal"
  bottom: "depthglobal"
  bottom: "conv8-transpose"
  top: "concatergbdepth"
  type: "Concat"
  concat_param {
    axis: ?
  }
}

## lstm decode to obtain the feature map for pixel labeling
layer {
  name: "clip_markerslocalglobal_1"
  type: "DummyData"
  top: "clip_markers_localglobal_1"
  dummy_data_param {
    shape {
      dim: 54
      dim: 54
    }
  }  
}


layer {
  name: "lstmhha2"
  type: "LSTM"
  bottom: "concatergbdepth"
  bottom: "clip_markerslocalglobal_1"
  top: "featuremap"
  recurrent_param {
    num_output: 100
    weight_filler {
      type: "uniform"
      min: -0.01
      max: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layers {
  bottom: "label"
  top: "label_shrink"
  name: "label_shrink"
  type: INTERP
  interp_param {
    shrink_factor: 8
    pad_beg: -1
    pad_end: 0
  }
}
layers {
  name: "loss"
  type: SOFTMAX_LOSS
  bottom: "featuremap"
  bottom: "label_shrink"
  softmaxloss_param {
    #weight_source: "voc12/loss_weight/loss_weight_train.txt"
  }
  include: { phase: TRAIN }
}
layers {
  name: "accuracy"
  type: SEG_ACCURACY
  bottom: "conv8"
  bottom: "label_shrink"
  top: "accuracy"
}

# layers {
#   name: "im_data"
#   type: IMSHOW
#   bottom: "data"
# }
# layers {
#   name: "im_scores"
#   type: IMSHOW
#   bottom: "conv8"
# }

#layers {
#  name: "fc8_mat"
#  type: MAT_WRITE
#  bottom: "conv8"
#  mat_write_param {
#    prefix: "/home/ganyk/SUNRGBD/features/conv8/"
#    source: "/home/ganyk/SUNRGBD/test_id.txt"
#    strip: 0
#    period: 1
#  }
#  include: { phase: TEST }
#}