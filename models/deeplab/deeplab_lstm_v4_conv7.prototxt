# VGG 16-layer network convolutional finetuning
# Network modified to have smaller receptive field (128 pixels)
# and smaller stride (8 pixels) when run in convolutional mode.
#
# For alignment to work, we set:
# (1) input dimension equal to
# $n = 8 * k + 2$, e.g., 306 (for k = 38)
# (2) dimension after 3rd max-"Pooling" (centered at -3.5)
# $m = k + 2$ (40 if k = 38)
# (3) dimension after 4th max-"Pooling" (centered at -1.5)
# $m = k + 1$ (39 if k = 38)
# (4) Crop 1 pixels at the begin of label map and shrink by 8
# to produce the expected $m$
# 

name: "deeplab"

layer {
  name: "data"
  type: "ImageSegData"
  top: "data"
  top: "label"
  image_data_param {
    root_folder: "/home/ganyk/"
    source: "/home/ganyk/SUNRGBD/list_train.txt"
    label_type: PIXEL
    batch_size: 1
    shuffle: false
  }
  transform_param {
    mean_value: 110.324
    mean_value: 116.435
    mean_value: 125.793
    crop_size: 426 # = 53*8 + 2
    mirror: true
  }
  include: { phase: TRAIN }
}
layer {
  name: "data"
  type: "ImageSegData"
  top: "data"
  top: "label"
  image_data_param {
    root_folder: "/home/ganyk/"
    source: "/home/ganyk/SUNRGBD/list_test.txt"
    label_type: PIXEL
    batch_size: 1
    shuffle: false
  }
  transform_param {
    mean_value: 110.324
    mean_value: 116.435
    mean_value: 125.793
    crop_size: 426 # = 53*8 + 2
    mirror: true
  }
  
  include: { phase: TEST }
}

##### data layer for HHA ########

layer {
  name: "HHAData"
  type: "ImageSegData"
  top: "HHAData"
  #top: "label1"
  image_data_param {
    root_folder: "/home/ganyk/"
    source: "/home/ganyk/SUNRGBD/HHAList_train.txt"
    label_type: NONE
    batch_size: 1
    shuffle: false
  }
  transform_param {
    mean_value: 115.042
    mean_value: 231.247
    mean_value: 20.523
    crop_size: 426 # = 53*8 
    mirror: true
  }
  include: { phase: TRAIN }
}

layer {
  name: "HHAData"
  type: "ImageSegData"
  top: "HHAData"
  #top: "label2"
  image_data_param {
    root_folder: "/home/ganyk/"
    source: "/home/ganyk/SUNRGBD/HHAList_test.txt"
    label_type: NONE
    batch_size: 1
    shuffle: false
  }
  transform_param {
    mean_value: 115.042
    mean_value: 231.247
    mean_value: 20.523
    crop_size: 426 # = 53*8 
    mirror: true
  }
  
  include: { phase: TEST }
}

### NETWORK ###

layer {
  bottom: "data"
  top: "conv1_1"
  name: "conv1_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_1"
  top: "conv1_1"
  name: "relu1_1"
  type: "ReLU"
}
layer {
  bottom: "conv1_1"
  top: "conv1_2"
  name: "conv1_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_2"
  top: "conv1_2"
  name: "relu1_2"
  type: "ReLU"
}
layer {
  bottom: "conv1_2"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 1
  }
}
layer {
  bottom: "pool1"
  top: "conv2_1"
  name: "conv2_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_1"
  top: "conv2_1"
  name: "relu2_1"
  type: "ReLU"
}
layer {
  bottom: "conv2_1"
  top: "conv2_2"
  name: "conv2_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_2"
  top: "conv2_2"
  name: "relu2_2"
  type: "ReLU"
}
layer {
  bottom: "conv2_2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 1
  }
}
layer {
  bottom: "pool2"
  top: "conv3_1"
  name: "conv3_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_1"
  top: "conv3_1"
  name: "relu3_1"
  type: "ReLU"
}
layer {
  bottom: "conv3_1"
  top: "conv3_2"
  name: "conv3_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_2"
  top: "conv3_2"
  name: "relu3_2"
  type: "ReLU"
}
layer {
  bottom: "conv3_2"
  top: "conv3_3"
  name: "conv3_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_3"
  top: "conv3_3"
  name: "relu3_3"
  type: "ReLU"
}
layer {
  bottom: "conv3_3"
  top: "pool3"
  name: "pool3"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 1
  }
}
layer {
  bottom: "pool3"
  top: "conv4_1"
  name: "conv4_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_1"
  top: "conv4_1"
  name: "relu4_1"
  type: "ReLU"
}
layer {
  bottom: "conv4_1"
  top: "conv4_2"
  name: "conv4_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_2"
  top: "conv4_2"
  name: "relu4_2"
  type: "ReLU"
}
layer {
  bottom: "conv4_2"
  top: "conv4_3"
  name: "conv4_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_3"
  top: "conv4_3"
  name: "relu4_3"
  type: "ReLU"
}
layer {
  bottom: "conv4_3"
  top: "pool4"
  name: "pool4"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    #pad: 1
    #stride: 2
    stride: 1
  }
}
layer {
  bottom: "pool4"
  top: "conv5_1"
  name: "conv5_1"
  type: "ConvolutionDeeplab"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_deeplab_param {
    num_output: 512
    #pad: 1
    pad: 2
    hole: 2
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_1"
  top: "conv5_1"
  name: "relu5_1"
  type: "ReLU"
}
layer {
  bottom: "conv5_1"
  top: "conv5_2"
  name: "conv5_2"
  type: "ConvolutionDeeplab"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_deeplab_param {
    num_output: 512
    #pad: 1
    pad: 2
    hole: 2
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_2"
  top: "conv5_2"
  name: "relu5_2"
  type: "ReLU"
}
layer {
  bottom: "conv5_2"
  top: "conv5_3"
  name: "conv5_3"
  type: "ConvolutionDeeplab"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_deeplab_param {
    num_output: 512
    #pad: 1
    pad: 2
    hole: 2
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_3"
  top: "conv5_3"
  name: "relu5_3"
  type: "ReLU"
}
layer {
  bottom: "conv5_3"
  top: "pool5"
  name: "pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    #kernel_size: 2
    #stride: 2
    kernel_size: 3
    stride: 1
    pad: 1
  }
}

layer {
  bottom: "pool5"
  top: "conv6"
  name: "conv6"
  type: "ConvolutionDeeplab"
  #strict_dim: false
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_deeplab_param {
    num_output: 4096
    pad: 6
    hole: 4
    kernel_size: 4
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv6"
  top: "conv6"
  name: "relu6"
  type: "ReLU"
}
layer {
  bottom: "conv6"
  top: "conv6"
  name: "drop6"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "conv6"
  top: "conv7"
  name: "conv7"
  type: "Convolution"
  #strict_dim: false
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4096
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv7"
  top: "conv7"
  name: "relu7"
  type: "ReLU"
}
layer {
  bottom: "conv7"
  top: "conv7"
  name: "drop7"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  bottom: "label"
  top: "label_shrink"
  name: "label_shrink"
  type: "Interp"
  interp_param {
    shrink_factor: 8
    pad_beg: -1
    pad_end: 0
  }
}

#####  Mask layers ######

layer {
  name: "mask_54_54_vertical"
  type: "Mask"
  top: "mask_54_54_vertical"
  mask_param {
    width: 54
    height: 54
    masktype: VERTICAL
  }
}

layer {
  name: "mask_54_54_horizontal"
  type: "Mask"
  top: "mask_54_54_horizontal"
  mask_param {
    width: 54
    height: 54
    masktype: HORIZONTAL
  }
}

### HHA 3 Conv NETWORK ###
layer {
  bottom: "HHAData"
  top: "HHA_conv1"
  name: "HHA_conv1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 4
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  bottom: "HHA_conv1"
  top: "HHA_conv1"
  name: "HHA_relu1"
  type: "ReLU"
}

layer {
  bottom: "HHA_conv1"
  top: "HHA_pool1"
  name: "HHA_pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 0
  }
}
layer {
  bottom: "HHA_pool1"
  top: "HHA_conv2"
  name: "HHA_conv2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "HHA_conv2"
  top: "HHA_conv2"
  name: "HHA_relu2"
  type: "ReLU"
}

layer {
  bottom: "HHA_conv2"
  top: "HHA_pool2"
  name: "HHA_pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 0
  }
}

layer {
  bottom: "HHA_pool2"
  top: "HHA_conv3"
  name: "HHA_conv3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  bottom: "HHA_conv3"
  top: "HHA_conv3"
  name: "HHA_relu3"
  type: "ReLU"
}

layer {
  bottom: "HHA_conv3"
  top: "HHA_pool3"
  name: "HHA_pool3"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 0
  }
}

#####  LSTM layers for HHA #####
layer {
  bottom: "HHA_pool3"
  name: "HHA_pool3_trans"
  type: "Transpose"
  top: "HHA_pool3_trans"
  transpose_param{
    transposetype: CONVTOLSTM
    shape {
      dim: 54
      dim: 54
      dim: 128
    }
  }
}

# from top to bottom using lstm each column
layer {
  name: "HHA_lstm1"
  type: "LSTM"
  bottom: "HHA_pool3_trans"
  bottom: "mask_54_54_vertical"
  top: "HHA_lstm1"
  recurrent_param {
    num_output: 100
    weight_filler {
      type: "uniform"
      min: -0.01
      max: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "HHA_lstm1_reshape"
  type: "Reshape"
  bottom: "HHA_lstm1"
  top: "HHA_lstm1_reshape"
  reshape_param{
    shape{
      dim: 1 
      dim: 100
      dim: 54
      dim: 54
    }
  }
}

layer {
  bottom: "HHA_lstm1_reshape"
  name: "HHA_lstm1_trans"
  type: "Transpose"
  top: "HHA_lstm1_trans"
  transpose_param{
    transposetype: LSTMTOCONV
    shape {
      dim: 1
      dim: 100
      dim: 54
      dim: 54
    }
  }
}


##### LSTM for RGB ########
layer {
  bottom: "conv7"
  name: "conv7_trans"
  type: "Transpose"
  top: "conv7_trans"
  transpose_param{
    transposetype: CONVTOLSTM
    shape {
      dim: 54
      dim: 54
      dim: 4096
    }
  }
}

# from top to bottom using lstm each column
layer {
  name: "RGB_lstm1"
  type: "LSTM"
  bottom: "conv7_trans"
  bottom: "mask_54_54_vertical"
  top: "RGB_lstm1"
  recurrent_param {
    num_output: 100
    weight_filler {
      type: "uniform"
      min: -0.01
      max: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "RGB_lstm1_reshape"
  type: "Reshape"
  bottom: "RGB_lstm1"
  top: "RGB_lstm1_reshape"
  reshape_param{
    shape{
      dim: 1 
      dim: 100
      dim: 54
      dim: 54
    }
  }
}

layer {
  bottom: "RGB_lstm1_reshape"
  name: "RGB_lstm1_trans"
  type: "Transpose"
  top: "RGB_lstm1_trans"
  transpose_param{
    transposetype: LSTMTOCONV
    shape {
      dim: 1
      dim: 100
      dim: 54
      dim: 54
    }
  }
}

# concat RGB_global and HHA_global
layer {
  name: "RGB_HHA_global"
  type: "Concat"
  bottom: "RGB_lstm1_trans"
  bottom: "HHA_lstm1_trans"
  top: "RGB_HHA_global"
  concat_param {
    axis: 1
  }
}

layer {
  bottom: "RGB_HHA_global"
  name: "RGB_HHA_global_trans"
  type: "Transpose"
  top: "RGB_HHA_global_trans"
  transpose_param{
    transposetype: CONVTOLSTM
    shape {
      dim: 54
      dim: 54
      dim: 200
    }
  }
}

layer {
  name: "global"
  type: "LSTM"
  bottom: "RGB_HHA_global_trans"
  bottom: "mask_54_54_horizontal"
  top: "global"
  recurrent_param {
    num_output: 100
    weight_filler {
      type: "uniform"
      min: -0.01
      max: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "global_reshape"
  type: "Reshape"
  bottom: "global"
  top: "global_reshape"
  reshape_param{
    shape{
      dim: 1 
      dim: 100
      dim: 54
      dim: 54
    }
  }
}

layer {
  bottom: "global_reshape"
  name: "global_trans"
  type: "Transpose"
  top: "global_trans"
  transpose_param{
    transposetype: LSTMTOCONV
    shape {
      dim: 1
      dim: 100
      dim: 54
      dim: 54
    }
  }
}


# concat local and global
layer {
  name: "local_global"
  type: "Concat"
  bottom: "conv7"
  bottom: "global_trans"
  top: "local_global"
  concat_param {
    axis: 1
  }
}

layer {
  bottom: "local_global"
  top: "local_global_conv"
  name: "local_global_conv"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 38
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "local_global_conv"
  bottom: "label_shrink"
  #softmax_param {
  #  weight_source: "voc12/loss_weight/loss_weight_train.txt"
  #}
  include: { phase: TRAIN }
}

layer {
  name: "accuracy"
  type: "SegAccuracy"
  bottom: "local_global_conv"
  bottom: "label_shrink"
  top: "accuracy"
}